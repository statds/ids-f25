## Presentations with Quarto

This section is written by Irene Chen, a Senior majoring in Statistical Data Science at the University of Connecticut.

### Introduction

Quarto allows you to create dynamic, reproducible, and visually appealing presentations from a single source file. You can generate interactive slides with code, visuals, and math without having to switch between multiple tools. It works smoothly with Git for collaboration and can update automatically as your data changes. Quarto support multiple programming languages, and allows multiple output formats. 

### Presentation Formatting
Quarto supports several formats for creating presentations including:

- `revealjs` - reveal.js (HTML)

- `beamer` - Beamer (LaTex/PDF)

- `pptx` - PowerPoint (Microsoft Office)

Slides will render as HTML by default, and it is preferred over `beamer` and `pptx` unless you are specifically looking for a LaTeX or Office output.

| Feature | `revealjs` | `beamer`  | `pptx`  |
|--------------|----------------|------------|---------------|
| **Output Format** | HTML or PDF |  PDF | Powerpoint |
| **Pros**      | - Runs in any browser  <br> - Easily sharable with a link <br> - Allows for CSS styling  <br>  - Allows interactive elements <br> - Only requires Quarto and a text editor| - Excellent math rendering <br> - Ensures consistent fonts and equations through LaTeX <br> - Produces high-quality, professional slides | - Fully editable within MS PowerPoint <br> - Familiar interface for non-technical users <br> - Easy template customization | 
| **Cons**  | - Requires a web browser to present <br> - Offers limited offline functionality | - Requires a LaTeX distribution <br> - Has a more rigid design layout <br> - Harder to customize visually | - Lacks Quarto's interactivity <br> - Manual re-rendering when data changes <br> - Requires MS Office |


### Creating a Presentation File

In your new `.qmd` file, include a YAML header at the top to tell Quarto to render slides instead of a document. 

```python
---
title: "Presentations with Quarto"
format: revealjs 
---
```

#### YAML Header Example

```python
---
title: "Presentations with Quarto"
author: "Irene Chen"
format:
  revealjs: 
    embed-resources: true
    multiplex: true
    preview-links: true
    theme: [simple, custom.css]
    transition: concave
    footer: "STAT 3255/5255, Fall 2025"

---
```

### YAML Customizations for `revealjs`

#### Functional YAML Customizations

- `embed-resources: true` - Creates self-contained file HTML files that bundles images, fonts, and CSS for easy sharing.

- `multiplex: true` - Allows live audience synchronization.

- `preview-links: true` - Opens link previews directly within the slide.

- `toc: true` - Generates a table of contents slide automatically.

-  `center: false` - Aligns content at the top rather than centering on the slides.

#### Stylistic YAML Customizations

- `theme: [slide theme]` - Configures the theme as one of the 12 included with Reveal (or one of your own as a `.css`). 
    - `default`, `white`, `league`, `night`, `beige`, `simple`, `serif`, `solarized`, `moon`,  `dracula`, `sky`, `blood`
    - Note: `default` is automatically used, so this header is only used for alternative themes.

- `transition: [transition]` - Adds transitions in between the slides.
    - `none`, `slide`, `fade`, `convex`, `concave`, `zoom`

- `footer: "Footer Note"` - Adds a footer or tagline to bottom of each slide.

- `slide-number: true` - Displays the slide number at bottom of each slide. 

- `incrimental: true` - Reveals bullet points one by one.

#### CSS files

A CSS file (short for Cascading Style Sheets) is a styling file used to control how your content looks (colors, fonts, layout, spacing, etc...). In the same folder as your `.qmd`, make a file called `custom.css` (or `custom.scss`). An example could look like this:

```css
:root{ 
    --r-background-color: #ffffff;
    --r-main-color: #ffffff;
}

.reveal p, .reveal li {
    font-family: "Open Sans", sans-serif;
    font-size 1.1m;
}

.reveal code {
    background: #ffffff;
    color: #ffffff;
    padding: 2px 4px;
    border-radius: 4px;
}
```

Add the file name to the YAML heading like `theme: [custom.css]`. You can also make a cascading theme like `theme: [simple, custom.css]`, which starts with the simple theme and applies the custom design rules on top.

**Note**: Order matters because style sheets cascade. A sheet with multiple rules for the same element creates a hierarchy of specificity.


### Creating a New Slide

- Each level 1 header (`#`) creates a new title slide section.

- Each level 2 header (`##`) creates a sub-slide that will appear when you press the down arrow.

- Adding (`###`) will create a subheading in the slide, not a new slide.

- Horizontal rules (`---`) are used to create a slide when you don't want to add a heading or title.


### Code Blocks

If you want Quarto to run the Python code and show the output, add curly brackets:


```` python
```{{python}}
print("Hello World!")
```
````

```{python}
print("Hello World!")
```

If you want Quarto to show the code on the slide as text, but not execute it, remove the curly brackets. Quarto will treat this as plain Markdown code and not recognize it as executable. This is perfect for simple code display to show examples or syntax:


```` markdown
```python
print("Hello World!")
```
````

```python
print("Hello World!")
```

Similarly, Quarto will show the code on the slide without running it, but Quarto will treat it as a code cell that is part of your document even though the code isn't evaluated. This is perfect for code display that stays consistently styled with other executable blocks.

```` markdown
```{{.python}}
print("Hello World!")
```
````

```{.python}
print("Hello World!")
```

If you want Quarto to display the raw code block, add two lines of `markdown`. This is perfect for tutorials.

```` markdown
```` markdown
```` markdown
```python
print("Hello World!")
```
````


```` markdown
```` markdown
```python
print("Hello World!")
```
````

### Code Highlighting
To highlight specific lines of code output, you can use `code-line-numbers`.

For example: 
````markdown
```{.python code-line-numbers="2-3"}
import matplotlib.pyplot as plt
x = [1, 2, 3, 4]
y = [2, 4, 6, 8]
plt.plot(x, y)
plt.show()
```
````

You can also highlight disparate ranges of lines by using `,` to separate rather than `-`. 

For example, 
````markdown
```{.python code-line-numbers="2, 4"}
import matplotlib.pyplot as plt
x = [1, 2, 3, 4]
y = [2, 4, 6, 8]
plt.plot(x, y)
plt.show()
```
````

Finally, you can highlight different line ranges. For example, here we show all the lines highlighted, then only line 1, and finally only line 4 is highlighted: 
````markdown
```{.python code-line-numbers="|1|4"}
import matplotlib.pyplot as plt
x = [1, 2, 3, 4]
y = [2, 4, 6, 8]
plt.plot(x, y)
plt.show()
```
````

### Code Echo
By default, executable code blocks within Quarto presentations do not `echo` their source code. To override this, add `#| echo: true` inside the code fence at the top.

Ex: `echo: false`

````markdown
```{.python}
#| echo: false
print("Hello World!")
```
````

```{python}
#| echo: false
print("Hello World!")
```


Ex: `echo: true`

````markdown
```{.python}
#| echo: true
print("Hello World!")
```
````

```{python}
#| echo: true
print("Hello World!")
```

### Output Location
By default, outputs from code blocks are displayed immediately after the code. To change this, you can use `#| output-location: [output location]`. The location options include:

- `column` : Displays the output in a column next to the code

- `slide` : Displays the output on the following slide

- `fragment` : Displays the output as a Fragment (delays displaying the output until you advance the slide)

- `column-fragment` : Displays the output in a column next to the code as a Fragment

**Note**: `output-location` only works for code cells that echo (`#| echo: true`).

### Images

``` markdown
![Quarto Logo](https://quarto.org/docs/get-started/hello/images/quarto.png){width=300px}
```

- The caption for the figure is enclosed in `[]`.

- The file path for the saved image file is enclosed in `()`.

- Any optional stylistic attributes like size, alignment, and class are enclosed in `{}`.

**Note**: Remember to use relative references when specifying the file path to ensure seamless reproducibility, not absolute references.


### Hyperlinks

```markdown
[Quarto](https://quarto.org)
```

- The text/caption for the link is enclosed in `[]`.

- The URL link is enclosed in `()`.


### Math

You can use `\( ... \)`  for inline math, which appears in the line of text. For example, 
```markdown
The Pythagorean theorem equation is \(a^2 + b^2 = c^2 \).
```

The Pythagorean theorem equation is \(a^2 + b^2 = c^2 \).

<br>

With LaTeX, you can use `$ ... $` to show in-text math. For example,
```markdown
The Pythagorean theorem equation is $a^2 + b^2 = c^2$.
```

The Pythagorean theorem equation is $a^2 + b^2 = c^2$.

<br>

With LaTeX, you can also use `$$ ... $$` to display math, which centers the equation in its own line. For example, 

```markdown
The quadratic formula is given by
$$
x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}.
$$
```

The quadratic formula is given by
$$
x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}.
$$


### Div Containers

Div containers are special blocks that allow you to add attributes or structure to specific parts of your presentation. They start and end with triple colons (`:::`) and include classes like `.incremental` or attributes like `width="50%"`.

### Incremental Lists

Bulleted lists by default are displayed all at once. You can change this globally by using `incremental: true` in the YAML header, or explicitly change it by slide using `{.incremental}`.

To make a list incremental:
```markdown
::: {.incremental}

- Bullet 1
- Bullet 2
- Bullet 3

:::
```

Similarly, to make a list non-incremental:
```markdown
::: {.nonincremental}

- Bullet 1
- Bullet 2
- Bullet 3

:::
```

### Columns

Use `{.columns}` to create columns in your slides. Each `.column` can be given a specific width percentage to control how much space is taken up. 

```markdown
::::{.columns}

:::{.column width="30%"}
Left Column
:::

:::{.column wideth="70%"}
Right Column
:::

::::
```

::::{.columns}

:::{.column width="30%"}
**Left Column**

- Item 1
- Item 2
:::

:::{.column wideth="70%"}
**Right Column**

- Item 1
- Item 2
:::

::::


### Overflow

Some slides may contain more content than can be displayed in a single slide. You can fix this with `{.smaller}`, which will use a smaller typeface so that more text fits on the slide. You can also use `{.scrollable}`, to make any content that ends up off the slide available when you scroll. 

Both of these overlay classes can also be applied globally in the YAML header:

```python
---
format: 
    revealjs:
        smaller: true
        scrollable: true
---
```


### Speaker Notes

Add notes using a div with class `{.notes}` that will only be visible to the presenter, not the audience. Press S during the presentation to open Speaker View (which displays your notes, the current slide, and the next slide). You can also see a timer and slide navigation tools.

```markdown
::: {.notes}
Speaker Notes 1
:::
```

::: {.notes}
Speaker Notes 1
:::

### Multiplexing

Adding `multiplex: true` in your YAML enables a live audience mode:

- `presentations.html` - Audience slides that you publish.

- `presentations-speaker.html` - Presenter's version that is used to control the slides.

### Chalkboard

Annotate directly on your slides while presenting by enabling the option under your YAML settings with `chalkboard:true`. Some shortcuts include:

- B : Toggles the chalkboard on and off.

- C : Toggles the notes canvas on and off.

- DEL/ BACKSPACE : Clears the board.

- X : Cycles the colors forward.

- Y : Cycles the colors backward.

- D : Downloads the drawings.

### Rendering 

Render the Quarto presentation by entering the following code in your terminal and it will reveal presentation.html which can be opened in a browser.

```python
quarto render presentation.qmd
```

Temporarily override the YAML format to test how it looks in other formats. For example:

```python
quarto render presentation.qmd --to beamer
```

### Additional Reading
- [Quarto Presentations](https://quarto.org/docs/presentations/)
- [Quarto Revealjs](https://quarto.org/docs/reference/formats/presentations/revealjs.html)
- [Quarto Beamer](https://quarto.org/docs/presentations/beamer.html)
- [Quarto PowerPoint](https://quarto.org/docs/reference/formats/presentations/pptx.html)



